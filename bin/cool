#!/bin/bash

help() {
  echo "Usage: cool [OPTION]... FILE..."
  echo "Cool interpreter written in Cool"
  echo
  echo "Compilation options:"
  echo "  --lex            stop after lexical analysis"
  echo "  --parse          stop after parsing"
  echo "  --analyze        stop after semantic analysis"
  echo "  --uva            use UVA Cool dialect"
  echo
  echo "Diagnostic options:"
  echo "  --bootstrap      run Cool-in-Cool with itself"
  echo "  --bootstrap-debug=OPTIONS"
  echo "                     set debug options for the bootstrap interpreter"
  echo "  --debug=OPTIONS  set debug options"
  echo "  --format-errors  show line numbers for errors in Cool-in-Cool itself"
  echo "  --help           show this help text"
  echo "  --stdin          enable standard input (default)"
  echo "    --no-stdin     disable standard input"
  exit
}

dir=$(dirname "$0")
coolfiles=("$dir"/../cool.cl "$dir"/../lib/*.cl)

interpreteroptions=()
bootstrapoptions=()
options=()
files=()
bootstrap=false
uva=false
stdin=true
for arg in "$@"; do
  case $1 in
  --) shift; files+=("$@"); break;;
  --bootstrap) bootstrap=true;;
  --bootstrap-debug=*) bootstrapoptions+=("$1");;
  --debug=*) options+=("$1");;
  --format-errors) interpreteroptions+=(--format-errors);;
  --lex | --parse | --analyze) options+=($1);;
  --uva) uva=true;;
  --stdin) stdin=true;;
  --no-stdin) stdin=false;;
  --help | -h | -\?) help;;
  -*) echo "$0: $1: unrecognized option" >&2; exit 1;;
  *) files+=("$1")
  esac
  shift
done

if ((${#files[@]} == 0)); then
  echo "cool: no input files" >&2
  exit 1
fi

write_files() {
  local stdin=$1
  shift

  if $stdin; then
    echo "--cool:option=--stdin"
  fi
  echo "--cool:eof=$eoflen"
  echo "--cool:files=$#"

  for file in "$@"; do
    echo "--cool:file=$file"
    cat < "$file" || exit 1
    # This will print N+1 newlines, which is what we want since the last line
    # of the file might not have ended in a newline
    echo "$eof"
  done

  if $stdin; then
    echo .
  fi
}

run_interpreter_wrapper() {
  interpretercoolfiles=("${coolfiles[@]}")
  for i in ${!interpretercoolfiles[@]}; do
    case ${interpretercoolfiles[$i]} in
    *-support.cl) unset interpretercoolfiles[$i]
    esac
  done

  "$dir"/interpreter-wrapper "${interpreteroptions[@]}" "${interpretercoolfiles[@]}"
}

# Use a temporary file rather than a pipeline so that errors reading the input
# files are not written in parallel with errors from the interpreter.
tmpdir=$(mktemp -d -t coolXXXXXXXXXX) || exit 1
trap 'rm -r "$tmpdir"' EXIT
inputfile=$tmpdir/input.cl
stdiofifo=$tmpdir/stdio
mkfifo "$stdiofifo" || exit 1

eoflen=1024
eof=$(printf '%*s' $eoflen)
eof=${eof// /$'\n'}

{
  printf -- '--cool:escape:\\b=\b:\\t=\t:\\v=\v:\\f=\f:\\r=\r:\n'

  if $bootstrap; then
    if $uva; then
      echo "--cool:uva"
    fi

    echo "--cool:option=--stdin"
    for option in "${bootstrapoptions[@]}"; do
      echo "--cool:option=--${option#--bootstrap-}"
    done

    bootstrapcoolfiles=("${coolfiles[@]}")
    for i in ${!bootstrapcoolfiles[@]}; do
      case ${bootstrapcoolfiles[$i]} in
      *-support.cl) $uva && unset bootstrapcoolfiles[$i];;
      *-support-uva.cl) ! $uva && unset bootstrapcoolfiles[$i]
      esac
    done

    write_files true "${bootstrapcoolfiles[@]}"
  fi

  if $uva; then
    echo "--cool:uva"
  fi

  for option in "${options[@]}"; do
    echo "--cool:option=$option"
  done

  write_files $stdin "${files[@]}"
} > "$inputfile"

if $stdin; then
  exec 3< "$inputfile"
  {
    echo "--cool:stdio"

    while read cmd < "$stdiofifo" && test -z "$cmd"; do
      IFS= read -r line <&3 || break
      printf '%s\n' "$line"
    done

    while test -z "$cmd"; do
      IFS= read -r line || break
      printf '%s\n' "$line"
      read cmd < "$stdiofifo" || break
    done

    while test -z "$cmd"; do
      echo
      read cmd < "$stdiofifo" || break
    done
  } | run_interpreter_wrapper | {
    while IFS= read -r line; do
      case $line in
      '>S:0')
        # Should not happen, but ignore if it does.
        ;;

      '>S:'*)
        # Use read -d '' -n to support BASH without read -N.  This works
        # because the interpreter will never print NUL.
        IFS= read -r -d '' -n"${line:3}" output
        printf "%s" "$output"
        ;;

      '>I:'*)
        printf "%s" "${line:3}"
        ;;

      '<')
        echo > "$stdiofifo"
        ;;

      *)
        # Fallback in case new IO is used directly (e.g., ObjectUtil).
        printf '%s\n' "$line"
      esac
    done

    echo "exit" > "$stdiofifo"
  }
else
  run_interpreter_wrapper < "$inputfile"
fi
